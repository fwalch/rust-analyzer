initSidebarItems({"enum":[["ArrayExprKind",""],["AttrInput",""],["AttrKind",""],["BinOp",""],["CommentPlacement",""],["CommentShape",""],["ElseBranch",""],["Expr",""],["ExternItem",""],["FieldDefList",""],["FieldKind",""],["GenericArg",""],["GenericParam",""],["ImplItem",""],["LeftDelimiter",""],["LiteralKind",""],["LiteralToken",""],["ModuleItem",""],["NameRefToken",""],["NominalDef",""],["Pat",""],["PathSegmentKind",""],["PrefixOp",""],["RangeOp",""],["RangeSeparator",""],["RecordInnerPat",""],["RightDelimiter",""],["SelfParamKind",""],["Stmt",""],["StructKind",""],["TypeBoundKind",""],["TypeRef",""],["VisibilityKind",""]],"mod":[["edit","This module contains functions for editing syntax trees. As the trees are immutable, all function here return a fresh copy of the tree, instead of doing an in-place modification."],["make","This module contains free-standing functions for creating AST fragments out of smaller pieces."]],"struct":[["Abi",""],["Alias",""],["Amp",""],["Ampamp",""],["Ampeq",""],["ArgList",""],["ArrayExpr",""],["ArrayType",""],["AsKw",""],["AssocTypeArg",""],["AstChildren","An iterator over `SyntaxNode` children of a particular AST type."],["AsyncKw",""],["At",""],["Attr",""],["AutoKw",""],["AwaitExpr",""],["AwaitKw",""],["BinExpr",""],["BindPat",""],["Block",""],["BlockExpr",""],["BoxExpr",""],["BoxKw",""],["BoxPat",""],["BreakExpr",""],["BreakKw",""],["Byte",""],["ByteString",""],["CallExpr",""],["Caret",""],["Careteq",""],["CastExpr",""],["Char",""],["Colon",""],["Coloncolon",""],["Comma",""],["Comment",""],["CommentIter",""],["CommentKind",""],["Condition",""],["ConstArg",""],["ConstDef",""],["ConstKw",""],["ConstParam",""],["ContinueExpr",""],["ContinueKw",""],["CrateKw",""],["DefaultKw",""],["Dollar",""],["Dot",""],["DotDotPat",""],["Dotdot",""],["Dotdotdot",""],["Dotdoteq",""],["DynKw",""],["DynTraitType",""],["ElseKw",""],["EnumDef",""],["EnumKw",""],["EnumVariant",""],["EnumVariantList",""],["Eq",""],["Eqeq",""],["Error",""],["Excl",""],["ExistentialKw",""],["ExprStmt",""],["ExternBlock",""],["ExternCrateItem",""],["ExternItemList",""],["ExternKw",""],["FalseKw",""],["FatArrow",""],["FieldExpr",""],["FloatNumber",""],["FnDef",""],["FnKw",""],["FnPointerType",""],["ForExpr",""],["ForKw",""],["ForType",""],["Gteq",""],["Ident",""],["IfExpr",""],["IfKw",""],["ImplDef",""],["ImplKw",""],["ImplTraitType",""],["InKw",""],["IndexExpr",""],["IntNumber",""],["ItemList",""],["LAngle",""],["LBrack",""],["LCurly",""],["LDollar",""],["LParen",""],["Label",""],["LambdaExpr",""],["LetKw",""],["LetStmt",""],["Lifetime",""],["LifetimeArg",""],["LifetimeParam",""],["Literal",""],["LiteralPat",""],["LoopExpr",""],["LoopKw",""],["Lteq",""],["MacroCall",""],["MacroDef",""],["MacroItems",""],["MacroKw",""],["MacroPat",""],["MacroStmts",""],["MatchArm",""],["MatchArmList",""],["MatchExpr",""],["MatchGuard",""],["MatchKw",""],["MetaItem",""],["MethodCallExpr",""],["Minus",""],["Minuseq",""],["ModKw",""],["Module",""],["MoveKw",""],["MutKw",""],["Name",""],["NameRef",""],["Neq",""],["NeverType",""],["OrPat",""],["Param",""],["ParamList",""],["ParenExpr",""],["ParenPat",""],["ParenType",""],["Path",""],["PathExpr",""],["PathPat",""],["PathSegment",""],["PathType",""],["Percent",""],["Percenteq",""],["Pipe",""],["Pipeeq",""],["Pipepipe",""],["PlaceholderPat",""],["PlaceholderType",""],["Plus",""],["Pluseq",""],["PointerType",""],["Pound",""],["PrefixExpr",""],["PubKw",""],["Question",""],["QuoteOffsets",""],["RAngle",""],["RBrack",""],["RCurly",""],["RDollar",""],["RParen",""],["RangeExpr",""],["RangePat",""],["RawByteString",""],["RawKw",""],["RawString",""],["RecordField",""],["RecordFieldDef",""],["RecordFieldDefList",""],["RecordFieldList",""],["RecordFieldPat",""],["RecordFieldPatList",""],["RecordLit",""],["RecordPat",""],["RefExpr",""],["RefKw",""],["RefPat",""],["ReferenceType",""],["RetType",""],["ReturnExpr",""],["ReturnKw",""],["SelfKw",""],["SelfParam",""],["Semi",""],["Shebang",""],["Shl",""],["Shleq",""],["Shr",""],["Shreq",""],["Slash",""],["Slasheq",""],["SlicePat",""],["SlicePatComponents",""],["SliceType",""],["SourceFile",""],["Star",""],["Stareq",""],["StaticDef",""],["StaticKw",""],["String",""],["StructDef",""],["StructKw",""],["SuperKw",""],["ThinArrow",""],["Tilde",""],["TokenTree",""],["TraitDef",""],["TraitKw",""],["TrueKw",""],["TryBlockExpr",""],["TryExpr",""],["TryKw",""],["TupleExpr",""],["TupleFieldDef",""],["TupleFieldDefList",""],["TuplePat",""],["TupleStructPat",""],["TupleType",""],["TypeAliasDef",""],["TypeArg",""],["TypeArgList",""],["TypeBound",""],["TypeBoundList",""],["TypeKw",""],["TypeParam",""],["TypeParamList",""],["Underscore",""],["UnionDef",""],["UnionKw",""],["UnsafeKw",""],["UseItem",""],["UseKw",""],["UseTree",""],["UseTreeList",""],["Visibility",""],["WhereClause",""],["WhereKw",""],["WherePred",""],["WhileExpr",""],["WhileKw",""],["Whitespace",""]],"trait":[["ArgListOwner",""],["AstNode","The main trait to go from untyped `SyntaxNode`  to a typed ast. The conversion itself has zero runtime cost: ast and syntax nodes have exactly the same representation: a pointer to the tree root and a pointer to the node itself."],["AstToken","Like `AstNode`, but wraps tokens rather than interior nodes."],["AttrsOwner",""],["DocCommentsOwner",""],["FnDefOwner",""],["HasQuotes",""],["HasStringValue",""],["LoopBodyOwner",""],["ModuleItemOwner",""],["NameOwner",""],["TypeAscriptionOwner",""],["TypeBoundsOwner",""],["TypeParamsOwner",""],["VisibilityOwner",""]]});